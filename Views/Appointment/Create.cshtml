@model MVCClass.Models.DTO.AppointmentDTO

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>AppointmentDTO</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.ClientId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.ClientId, ViewBag.ClientsList as SelectList, "Select Client", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ClientId, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.ClientName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.ClientName, ViewBag.ClientsList2 as SelectList, "Select Client", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ClientName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DoctorId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.DoctorId, ViewBag.DoctorsList as SelectList, "Select Doctor", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.DoctorId, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.DoctorName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.DoctorName, ViewBag.DoctorsList2 as SelectList, "Select Doctor", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.DoctorName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="form-group">
            @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{
                    // Obtener la fecha actual en formato yyyy-MM-dd
                    string currentDate = DateTime.Now.ToString("yyyy-MM-dd");
                }
                <input type="date" id="Date" name="Date" class="form-control" value="@currentDate" min="@currentDate" />
                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>


    <div class="form-group">
        <div class="form-group">
            @Html.LabelFor(model => model.StartTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="time" id="startTime" name="StartTime" class="form-control" readonly />
                @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.EndTime, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.EndTime, GetTimeList(), "-- Select End Time --", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.Reason, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Reason, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Reason, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10 mt-3">
            <input type="submit" value="Create" class="btn btn-primary btn-xs" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>




<script>
    // Get the current time
    var currentTime = new Date();
    var hours = currentTime.getHours().toString().padStart(2, '0'); // Add leading zero if needed
    var minutes = currentTime.getMinutes().toString().padStart(2, '0'); // Add leading zero if needed

    // Set the current time to the input field
    document.getElementById('startTime').value = hours + ':' + minutes;
</script>


<script>
    $(document).ready(function () {
        // Update hidden ClientId field when ClientNameDropdown changes
        $('#ClientNameDropdown').change(function () {
            var selectedClientId = $(this).val();
            $('#ClientIdField').val(selectedClientId);
        });

        // Update hidden DoctorId field when DoctorNameDropdown changes
        $('#DoctorNameDropdown').change(function () {
            var selectedDoctorId = $(this).val();
            $('#DoctorIdField').val(selectedDoctorId);
        });
    });
</script>


@* Helper method to generate a list of time options *@
@functions {
    public SelectList GetTimeList()
    {
        List<SelectListItem> timeList = new List<SelectListItem>();
        DateTime startTime = DateTime.Today.AddHours(8); // Start time, change as needed
        DateTime endTime = DateTime.Today.AddHours(18); // End time, change as needed

        while (startTime <= endTime)
        {
            timeList.Add(new SelectListItem
            {
                Text = startTime.ToString("hh:mm tt"), // Format time as desired (e.g., 08:00 AM)
                Value = startTime.ToString("HH:mm:ss") // Use HH:mm:ss format for backend processing
            });
            startTime = startTime.AddMinutes(30); // Increment by 30 minutes, adjust as needed
        }

        return new SelectList(timeList, "Value", "Text");
    }
}